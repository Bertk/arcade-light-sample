# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
  containers:
  - container: LinuxContainer
    image: mcr.microsoft.com/dotnet-buildtools-prereqs:ubuntu-16.04-cross-cfdd435-20190312152303


variables:
  - name: disable.coverage.autogenerate
    value: 'true'
  - name: Configuration
    value: 'Release'
  - name: SolutionPath
    value: 'SampleSolution.sln'
  - name: DOTNET_ROLL_FORWARD
    value: 'Major'

# Only run against main
trigger:
  branches:
    include:
      - main
  paths:
    exclude:
    - /*.md

jobs:
- job: 'build_and_test'
  displayName: 'Build and Test'
  condition: false
  pool:
    vmImage: 'windows-latest'

  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      useGlobalJson: true

  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore
      projects: '$(SolutionPath)'
      feedsToUse: config
      nugetConfigPath: NuGet.Config
      noCache: true

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: build
      configuration: '$(Configuration)'
      projects: '$(SolutionPath)'
      arguments: '--no-restore'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet unit test'
    inputs:
      command: test
      configuration: $(Configuration)
      projects: |
        **/SampleConsoleAppTest.csproj
      arguments: '--no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=Coverage/'
      workingDirectory: '$(Build.SourcesDirectory)'
      publishTestResults: true

  - task: reportgenerator@5
    displayName: 'Create Cobertura report'
    inputs:
      reports: '$(Build.SourcesDirectory)/**/coverage.opencover.xml'
      reporttypes: 'HtmlInline_AzurePipelines;Cobertura'
      targetdir: '$(Build.SourcesDirectory)/CoverageResults'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CoverageResults/Cobertura.xml'

  - template: eng/azuredevops/pipelines/templates/CheckNugetStatus.yml
    parameters:
      sourcePath: '$(Build.SourcesDirectory)/src'
      nugetConfig: '$(Build.SourcesDirectory)/nuget.config'
      breakBuild: false

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'

- job: 'Static_Code_Analysis'
  displayName: 'Static code analysis'
#  dependsOn: build_and_test
  pool:
    vmImage: 'windows-latest'
  variables:
  - name: system.debug
    value: true

  steps:
  - task: UseDotNet@2
    displayName: 'Use dotnet SDK (global)'
    inputs:
      packageType: 'sdk'
      useGlobalJson: true

  - task: NuGetAuthenticate@0
    displayName: "LicenseList: Authenticate on nuget feeds"

  - task: DotNetCoreCLI@2
    displayName: "LicenseList: Restore dotnet Projects"
    inputs:
      command: restore
      projects: '$(SolutionPath)'
      feedsToUse: config
      nugetConfigPath: 'nuget.config'

  - task: PowerShell@2
    displayName: 'LicenseList: Run dotnet-cyclonedx'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        dotnet tool restore
        dotnet tool list
        # build additional parameters
        $biopPath = "-biop '$(Build.SourcesDirectory)\artifacts'"
        Write-Verbose -Message "$($biopPath)" -Verbose
        $outputPath = "$(Build.SourcesDirectory)\artifacts\SBOM"
        Write-Verbose -Message "$($outputPath)" -Verbose
        if ( ! ( Test-Path -Path "$outputPath" -PathType Container )) {
           New-Item -Path "$(Build.SourcesDirectory)\artifacts" -Name "SBOM" -ItemType "directory"
           }
        Write-Verbose -Message "run CycloneDX: 'dotnet dotnet-CycloneDX --exclude-test-projects --exclude-dev -dpr -o $($outputPath) $($biopPath) ${{variables.SolutionPath}}'" -Verbose
        dotnet dotnet-CycloneDX --exclude-test-projects --exclude-dev -dpr -o $($outputPath) $($biopPath)  ${{variables.SolutionPath}}
        $projectFile = Split-Path ${{variables.SolutionPath}} -Leaf
        # eliminate file extensions
        $projectName = "$projectFile".Replace(".sln", "").Replace(".csproj", "")
        # rename it to the project's name
        Rename-Item "$($outputPath)/bom.xml" "$($projectName).bom.xml"
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: sca'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
