# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
- template: eng/common-variables.yml
- name: DOTNET_CLI_TELEMETRY_OPTOUT
  value: 1
- name: Configuration
  value: 'Debug'
- name: SolutionPath
  value: 'SampleSolution.sln'
- name: DOTNET_ROLL_FORWARD
  value: 'Major'
- name: disable.coverage.autogenerate
  value: 'false'

# Only run against main
trigger:
  branches:
    include:
      - main
  paths:
    exclude:
    - /*.md

stages:
- stage: build_Azure_DevOps
  displayName: Build (Azure DevOps tasks)
  jobs:
  - job: 'build_and_test'
    displayName: 'Build and Test'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        useGlobalJson: true

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '$(SolutionPath)'
        feedsToUse: config
        nugetConfigPath: NuGet.Config
        noCache: true

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        configuration: '$(Configuration)'
        projects: '$(SolutionPath)'
        arguments: '--no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet unit test'
      inputs:
        command: test
        configuration: $(Configuration)
        projects: |
          **/*.Tests.csproj
        arguments: '--no-restore --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
        workingDirectory: '$(Build.SourcesDirectory)'
        publishTestResults: false

    - task: PublishBuildArtifacts@1
      enabled: false
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'

- stage: build_ArcadeLight
  displayName: Build (ArcadeLight)
  dependsOn: []
  jobs:
    - template: /eng/azuredevops/pipelines/jobs/jobs.yml
      parameters:
        artifacts:
          publish:
            artifacts: true
            logs: true
        workspace:
          clean: all
        jobs:
        - job: 'arcade_light_build'
          displayName: 'Build and Test (ArcadeLight)'
          pool:
            vmImage: 'windows-latest'
        strategy:
          matrix:
            Build_Release:
              _BuildConfig: Release
            ${{ if eq(variables._RunAsPublic, True) }}:
              Build_Debug:
                _BuildConfig: Debug
        preSteps:
        - checkout: self
          fetchDepth: 0
          clean: true
        steps:
        - task: NuGetAuthenticate@1
        - script: eng\commonlight\cibuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            $(_InternalBuildArgs)
            /p:Test=false
          displayName: Windows Build / Publish
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        # vstest with coverlet.collector requires 'publish' of test project to generate coverage data
        - task: DotNetCoreCLI@2
          displayName: Publish test project
          inputs:
            command: 'publish'
            arguments: '-f net6.0 --configuration $(_BuildConfig)'
            publishWebProjects: false
            projects: 'src/**/*Tests.csproj'
            zipAfterPublish: false
            modifyOutputPath: false
          enabled: false
        - powershell: eng\commonlight\build.ps1
            -configuration $(_BuildConfig)
            -ci
            -restore
            -test
            -projects $(Build.SourcesDirectory)\**\*Tests.csproj
            /bl:$(Build.SourcesDirectory)\artifacts\log\$(_BuildConfig)\test-windows.binlog
            /p:RestoreUsingNuGetTargets=false
          displayName: Run Tests
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)

        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testRunner: VSTest
            testResultsFiles: '$(Build.SourcesDirectory)/artifacts/TestResults/**/*.trx'

        - template: ../steps/CoverageResults.yml
          parameters:
            reports: $(Build.SourcesDirectory)/artifacts/TestResults/**/coverage.cobertura.xml
            configuration: $(_BuildConfig)
            condition: and(succeeded(), eq(variables['_BuildConfig'], 'Debug'))
            assemblyfilters: '-xunit'
            breakBuild: false

        - publish: '$(Build.SourcesDirectory)/artifacts/TestResults'
          displayName: 'Publish TestResults Artifacts'
          artifact: TestResults_$(Agent.Os)_$(_BuildConfig)
          condition: succeededOrFailed()

- stage: Validate
  displayName: Validate
  dependsOn: build_Azure_DevOps
  jobs:
  - job: 'Static_Code_Analysis'
    displayName: 'Static code analysis'
    pool:
      vmImage: 'windows-latest'

    steps:
    - task: UseDotNet@2
      displayName: 'Use dotnet SDK (global)'
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: NuGetAuthenticate@1
      displayName: "Authenticate on nuget feeds"

    - task: DotNetCoreCLI@2
      displayName: "Restore dotnet Projects"
      inputs:
        command: restore
        projects: '$(SolutionPath)'
        feedsToUse: config
        nugetConfigPath: 'nuget.config'

    - template: eng/azuredevops/pipelines/steps/CheckNugetStatus.yml
      parameters:
        sourcePath: '$(Build.SourcesDirectory)/src'
        nugetConfig: '$(Build.SourcesDirectory)/nuget.config'
        breakBuild: true

    - template: eng/azuredevops/pipelines/steps/GenerateSBOM.yml
      parameters:
        projects: '$(SolutionPath)'
        outputPath: '$(Build.SourcesDirectory)\artifacts'
        publishSBOM: true
